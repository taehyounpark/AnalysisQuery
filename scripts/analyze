#!/usr/bin/env python

import os 
import sys
import argparse
import functools
import importlib

# from EventFlow import analysis

def parse_arguments():
  parser = argparse.ArgumentParser(description="Process some analysis parameters.")

  # Optional arguments
  parser.add_argument('--config', '-c', type=str, help='Analysis configuration file')
  parser.add_argument('--tree', type=str, default='CollectionTree', help='Name of the tree to analyze')
  parser.add_argument('--files', nargs='*', type=str, default=[], help='List of file paths')
  parser.add_argument('--input', '-i', type=str, help='Input JSON to specify the (tree, files) options')
  parser.add_argument('--multithread', '-j', type=int, default=0, help='Number of threads to use (default: 0)')
  parser.add_argument('--entries', type=int, default=-1, help='Number of entries to process (default: -1)')
  parser.add_argument('--weight', type=float, default=1.0, help='Scaling applied to all weights (default: 1.0)')
  parser.add_argument('--overwrite-output', '-f', action='store_true', help='Set this flag to enable fore output')
  parser.add_argument('--output', '-o', type=str, default='analyzed.root', help='Path to the output file (default: analyzed.root)')

  # parse arguments
  args = parser.parse_args()

  if (args.input):
    import json
    with open(args.input, 'r') as f:
      cfg = json.load(f)
      args.tree = cfg.get('tree')
      args.files = cfg.get('files')

  return args

# Example usage
if __name__ == '__main__':
  args = parse_arguments()

  # check if output already exists
  output_file = args.output
  if os.path.exists(args.output):
    if not args.overwrite_output:
      raise FileExistsError(f"Output file {output_file} already exists, delete it or specify a different file path.")

  # Prepare a context for exec to avoid polluting the global namespace
  local_vars = {}
  ana = None
  try:
    with open(args.config) as f:
      exec(f.read(), globals(), local_vars)

    from EventFlow.analysis import configured_instance
    ana = configured_instance

    if ana == None:
      print("A configured analysis instance not found. Have you called EventFlow.analysis.configure()?")
      sys.exit(1) 
  except Exception as e:
    print(f"Error executing script: {e}")
    sys.exit(1)
  

  # in_files = [ROOT.TFile.Open(in_file) for in_file in args.files]
  # analysis.preprocess(in_files)

  import ROOT
  import cppyy
  from ROOT import queryosity as qty
  df = qty.dataflow()
  cppyy.cppdef('''
  using dataflow = qty::dataflow;
  namespace multithread = qty::multithread;
  namespace dataset = qty::dataset;
  namespace column = qty::column;
  namespace selection = qty::selection;
  namespace query = qty::query;
  namespace systematic = qty::systematic;
  '''
  )

  # df = qty.dataflow(qty.multithread.enable(args.multithread), qty.dataset.head(args.entries))
  cppyy.cppdef('''
  dataflow df(multithread::enable({nthreads}), dataset::head({entries}), dataset::weight({weight}));
  '''.format(
    nthreads=int(args.multithread),
    entries=args.entries,
    weight=args.weight
  ))
  df = cppyy.gbl.df

  ds = df.load(qty.dataset.input['EventData'](ROOT.std.vector['std::string'](args.files), args.tree))

  print('Initializing...')
  # ana.initialize()

  print('Analyzing...')
  ana.analyze(df, ds)
  # df.analyze()

  print('Finalizing...')
  # ana.finalize()

  # output results
  print('Outputting...')
  # create the output file
  try:
    out_file = ROOT.TFile.Open(output_file, 'RECREATE')
  except OSError as e:
    raise OSError(f"Failed to create output file {output_file}: {e.strerror}")
  # write results
  ana.output(out_file)

  # IMPORTANT
  # must clean up ana BEFORE output file
  # (clashing object ownership between std::shared_ptr's of results written out to file)
  del ana
  del out_file

  sys.exit(0)